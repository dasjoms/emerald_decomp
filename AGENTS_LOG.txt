- Added `PLATFORM` make variable with PC option, enabling `-DPLATFORM_PC` and host toolchain selection for desktop builds.
- Created initial PC platform layer under `platform/pc` with entry point and stub modules for video, audio, input, timer, and filesystem.
- Implemented placeholder `PlatformInit`, `PlatformRunFrame`, and `PlatformShutdown` functions to orchestrate subsystem stubs.
- Extracted core game loop into new `GameLoop` function and added header declaration.
- Updated GBA `AgbMain` to call `GameLoop` and modified PC entry to run it each frame via `PlatformRunFrame`.
- Added lightweight GBA header shims under platform/pc and updated global.h to use them when building for PC.
- Created placeholder `map_groups.h` so `global.h` preprocesses successfully for the PC platform.
- Created abstraction hooks for hardware access: added platform functions for backdrop color, wait state, interrupt setup, and VBlank timing, and updated `src/main.c` to call them with PC stubs.
- Reordered `global.h` includes and expanded PC GBA shims to expose basic types, registers, and BIOS call declarations, resolving `u8` and other undefined identifier errors during PC builds.
- Introduced lightweight PC implementations of DMA/CPU helper macros and forward declarations so desktop compilers no longer warn about missing prototypes or pointer truncation when building core sources.
- Added C replacements for BIOS syscalls in `platform/pc/syscalls.c`, covering interrupt waits, memory operations, and LZ77 decompression; wired into the PC build to remove dependence on assembly stubs.
- Implemented SDL-backed input polling and 60 FPS timer, integrated SDL initialization/shutdown in the platform layer, added SDL2 build flags and DPAD constants, and adjusted strings header to coexist with system includes.
- Added an SDL-based video subsystem that opens a 240×160 window, manages an ARGB framebuffer, applies backdrop colors, and blits frames each iteration.
- Implemented SDL audio backend that feeds m4a’s PCM buffer to the host device, added `SOUND_INFO_PTR` shim, and wrapped hardware-specific portions of `m4a.c` for safe desktop builds.
- Included 'gba/types.h' in custom malloc header to prevent system <malloc.h> collisions during PC builds.
- Added PC Makefile support for m4a tables, introduced stubbed GameLoop and m4a engine placeholders so the desktop build links successfully; full audio and game logic remain TODO.
- Corrected SYM rule indentation in Makefile, restored placeholder map_groups.h, installed SDL2 dependencies, and verified PC build links to /tmp/pokeemerald.exe.
- Updated PC make rules to link all objects and emit `pokeemerald.exe` in the repository root, adjusting tests accordingly.
- Began runtime asset loading by adding `platform/pc/assets.c` and header with file-loading helper, integrated into the PC build; caching and PNG decoding remain TODO.
- Added basic asset caching and PNG decoding with SDL_image, exposing `AssetsLoadPNG` and initializing SDL_image in the platform layer to progress runtime asset loading.
- Filled out the PC GBA shim with display and palette constants and replaced one `INCBIN` usage with a lazy loader in `util.c`, beginning actual runtime asset substitution.
- Implemented JASC-PAL palette parsing and caching in the PC asset loader, switched blank interface assets to load PNG/palette at runtime, and updated contest utilities to assign these resources dynamically.
- Added PNG to 4bpp tile conversion with caching in the PC asset loader and updated `LoadMiscBlankGfx` to use runtime-loaded tiles.
- Extracted palettes from PNGs in the asset loader and switched text window frames and palettes to load at runtime, removing INCBIN dependencies for the PC build.
- Replaced message box graphics and palette with PNG-based runtime loading, removed corresponding INCBIN data, and extended PC GBA shims with tile and palette size macros so text windows compile on desktop.
- Switched rotating pocket indicator to load PNG graphics and palette at runtime, removed INCBIN assets from item menu icons, and expanded PC GBA shims with basic BG VRAM macros for desktop compilation.
- Began migrating weather assets to runtime loading by pulling the cloud palette and tiles from PNGs, extracting the sandstorm palette, and preparing the cloud sprite sheet for PC builds; remaining weather graphics still use placeholders.
- Completed weather asset migration by loading the fog palette from file, replacing all remaining weather tile INCBINs (fog, snow, bubbles, ash, rain, sandstorm) with PNG-based runtime loading and dynamic sprite sheets, and updating battle animations to use the new data.
- Migrated Pokédex cry screen assets to runtime loading, decoding PNG graphics and palettes for the cry meter needle, meter, and background, removing the remaining INCBIN data.
- Converted list menu interface assets (scroll arrows and red cursors) to runtime-loaded PNG graphics and palettes, eliminating their INCBIN data and leveraging the shared red UI palette.
- Implemented file-based flash save emulation for PC builds, adding platform/pc/flash.c to map GBA flash sectors to a saves/slot0.sav file and updating the PC Makefile.
- Converted Pokémon summary screen assets to runtime loading for PC builds, loading the status tilemap, A/B button graphics, and markings palette from external files to eliminate remaining INCBIN data.
- Migrated wireless minigame countdown graphics to load PNG sprites and palettes at runtime for PC builds, removing INCBIN dependencies.
- Loaded drought weather color lookup tables from external binaries for PC builds, eliminating remaining INCBIN data for the drought effect.
- Replaced Mystery Gift menu textbox border INCBIN data with runtime PNG loading for graphics and palette to advance PC asset migration.
- Converted Move Relearner interface graphics and palette to load from PNG at runtime on PC builds, eliminating remaining INCBIN assets for that menu.
- Converted Option Menu text palette and equals sign graphic to load from external files at runtime for PC builds, removing INCBIN data from that menu.
- Converted Save Failed screen clock graphics and palette to load from PNG at runtime for PC builds, eliminating corresponding INCBIN data.
- Converted battle environment backgrounds to load tilesets, tilemaps, and palettes from external files at runtime on PC builds, removing INCBIN dependencies and enabling dynamic battlefield rendering.
- Migrated Pokénav main menu spinning icon graphics and palette to load from PNG at runtime for PC builds, eliminating INCBIN data and preparing dynamic sprite sheet usage.
- Converted Pokéball battle transition assets to runtime loading for PC builds, decoding big Pokéball and trail graphics and palette from external files to replace remaining INCBIN data.
- Converted Trainer Card interfaces to runtime asset loading on PC, pulling tilemaps, tiles, and palettes from external files and removing related INCBIN data.
- Migrated cave transition graphics in `fldeff_flash.c` to runtime PNG and palette loading for PC builds, eliminating INCBIN usage for tiles, tilemap, and palettes.
